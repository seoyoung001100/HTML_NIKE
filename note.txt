:: 변수 let, var, const 차이 --------------------------------------------------------------------------------
    var 변수 
        - 전역 범위 혹은 함수 범위로 지정
        - 함수 외부에서 선언 될 때의 범위는 전역이다
            - 즉, 함수 외부에서 var을 사용하여 선언 된 모든 변수를 전체 윈도우 상에서 사용할 수 있는 것
            * 전역변수 : 변수는 보통 함수 안에서 선언 되는데 함수 외부에서도 선언 될 수 있는 변수를 말한다.
                       따라서 전역변수는 보통 제일 상단에 위치 한다.
                       지역변수와 달리 선언된 이후에 정의된 모든 함수에서 별도의 선언 없이 사용될 수 있기 때문이다.
        - 함수 내에서 선언될 때는 함수 범위로 지정된다. 
            - hi라는 변수가 선언되면 이 변수는 함수 안에서만 사용 가능하다는 말
            - 밖에서 사용하게 되면 오류가 발생할 수도 있음
        - 재선언되고, 값을 업데이트 할 수도 있다.
                --------------------------------------------------------------------
    let 변수
        - var 선언에 대한 개선을 반영한 let이 현재 변수 선언에서 선호되고 있다.
        - let으로 선언된 변수는 해당 블록 내에서만 사용이 가능하다.
            * 블록 : {} 형식으로 바인딩된 코드 청크를 말한다. 하나의 블록은 중괄호 속에 존재한다.
        - let은 업데이트될 수 있지만, 재선언은 불가능하다.
            - var과 마찬가지로 let으로 선언된 변수는 해당 범위 내에서 업데이트 될 수 있다.
            - 하지만 var과 달리 let 변수는 범위 내에서 다시 선언할 수 없다. << 무슨 말이지 이게... 
            - 그렇지만 동일한 변수가 다른 범위 내에서 정의 된다면, 에러는 더이상 발생하지 않는다.
                - 서로 다른 범위로 가질 수도 있기 때문에 다른 변수로 취급되기 때문이다. 
                - 따라서 var보다 let이 더 나은 선택이 될 수 있는 것이다.
            - var과 마찬가지로 let 선언은 맨 위로 끌어올려진다.
            - var가 다르게 let의 키워드는 초기화 되지 않는다. 
                --------------------------------------------------------------------
    const 변수
        - const로 선언된 변수는 일정한 상수 값을 유지한다.
        - const 선언은 let 선언과 몇가지 유사점을 공유한다.
        - const 선언은 선언된 불록 범위 내에서만 접근 가능하다.
        - 업데이트도, 재선언도 불사능하다.
            - const로 선언된 변수의 값이 해당 번위 내에서 동일하게 유지됨을 의미한다.
            - 그래서 업데이트 하거나 다시 선언할 수가 없는 것.
            - 모든 const 선언은 선언하는 당시에 초기화되어야 한다.
        - 하지만 개체의 경우 다소 다른 점이 있다.
            - const 개체는 업데이트할 수 없지만, 개체의 '속성'은 업데이트 할 수 있다.
        - let과 마찬가지로 const 선언도 맨 위로 끌어올려지지만, 초기화는 되지 않는다.
            * 이게 const의 호이스팅이다.
                --------------------------------------------------------------------
    요약
        - var 선언은 전역 범위 또는 함수 범위이며, let과 const는 블록 범위이다.   
        - 업데이트와 재선언
            - var 변수는 범위 내에서 없데이트 및 재선언이 가능
            - let 변수는 업데이트는 가능하지만 재선언은 불가능
            - const 변수는 업데이트와 재선언 둘 다 불가능
        - 세 가지 모두 최상위로 호이스팅된다.
            - var 변수만 undefined(정의되지 않음)으로 초기화되고 let, const변수는 초기화되지 않음
        - var, let은 초기화하지 않은 상태에서 선언할 수 있지만,const는 선언 중에 초기화 해야한다.

:: forEach와 map의 차이 --------------------------------------------------------------------------------
    forEach문
        - 배열의 각 요소에 대해 주어진 함수를 실행하는데, 그 결과를 반환하지는 않는다.
        - 주로 단순 반복 작업을 수행하거나, 배열의 요소를 화면에 출력하는 등의 사이드 이펙트를 발생 시킬 때 사용.
                --------------------------------------------------------------------
    map문
        - 배열에 각 요소에 대해 주어진 함수를 실행하고, 그 결과를 새 배열에 담아 반환한다.
        - 이는 기존 배열을 변경하지 않으면서 배열의 각 요소를 변환하거나 처리하는 데 사용된다.
                --------------------------------------------------------------------
    요약
        - 비슷한 용도로 사용되지만, 처리하는 방식과 반환 결과가 다르다.
        - map을 사용하는 코드가 좀 더 간결하고 명확하게 배열의 요소를 변환하는 작업을 수행한다는 것을 알 수 있다.

:: => 의미 --------------------------------------------------------------------------------
    => 함수
        - 함수를 축약해서 사용하는 느낌 (이전에 리액트 과제에서도 사용한 적이 있음)
        - 인자값 => return되는 내용
            - 이런 느낌으로 사용... 

:: new.js --------------------------------------------------------------------------------
    function createProductCard(product) {}
        - createProductCard
            - 선언한 함수명을 말한다.
        - product
            - product는 매개변수를 말한다.
            - 정보를 포함하는 객체로써 이미지, 태그, 상품명 등의 속성을 가질 수 있다.
                --------------------------------------------------------------------
    var productDiv = document.createElement('div');
        - var을 통해 productDiv라는 변수를 선언함.
        - 이 productDiv 변수 안에는 div라는 요소를 만드는 선언을 해준다.
        - 'div'는 필수 매개 변수로, 생성할 요소의 태그를 지정하는 문자열 타입의 매개변수를 말한다.
            - 생성 될 요소를 특정하기 때문에 제대로 된 이름으로 지어야 한다. 이 이름이 태그명이 된다.
    productDiv.className = 'product-card';
        - productDiv에 클래스 명을 product-card라는 이름으로 붙여준다는 의미이다.
        - CSS 스타일을 적용하거나 JavaScript를 사용해 특정 요소를 선택하는 데 사용될 수 있다.
        - HTML문서의 특정 위치에 삽입될 수 있다.
                --------------------------------------------------------------------
    var img = document.createElement('img');
        - var을 통해 img라는 변수를 선언함.
        - document.createElement를 사용하여 img라는 요소를 만든다. 
            >> 의문점... 원래 있는 태그명이랑 똑같은데 왜 선언이 가능하지? 클래스 명을 따로 추가해둬서 그런가...
            >> 클래스 명을 추가한 div 안에서만 사용 가능한 것 같음. 
    img.src = product['img'];
        - img요소의 소스를 product의 img속성 값으로 설정한다는 의미이다.
        - img 소스의 url을 설정하거나 가져오는 속성. 
        - json파일에서 가져오는 이름이라 json에서의 이름과 같아야 한다. 
    productDiv.appendChild(img);
        - img 요소를 productDiv의 자식 요소로 추가함.
        - appendChild는 주어진 요소를 다른 요소에 자식 요소로 추가 하는 JavaScript 메서드이다.
                --------------------------------------------------------------------
    var filteredProducts = data.filter(function(product) {});
        - var로 filteredProducts라는 변수를 선언해준다.
        - data 배열에서 'filter' 메서드를 호출하여, 특정 조건에 맞는 요소만을 선택한다. 
            * filter : 주어진 함수를 배열의 각 요소에 대해 실행하고, 그 함수가 'true'를 반환하는 요소만을
                       새 배열에 포함 시킨다.
        - product는 현재 처리 중인 배열 요소를 나타낸다.
    return isChecked ? product[0]['main-tags'] === '신제품' : true;
        - isChecked 값에 따라 필터링 조건을 결정한다.
            - 'isChecked'가 'true'인 경우, 'product[0]['main-tags']' 값이 '신제품'인 제품만 선택함
            - 'false'인 경우 모든 제품이 선택된다.
    displayProducts(filteredProducts);
        - displayProducts 함수를 호출하고 'filteredProducts' 배열을 그 함수에 전달한다. 
                --------------------------------------------------------------------
    var productCardElement = document.querySelector('#product-card');
        - #product-card 라는 ID를 가진 HTML 요소를 선택.
        - 그 요소를 productCardElement 변수에 할당한다.
        * document.querySelector : 선택한 CSS 선택자와 일치하는 첫번째 HTML요소를 반환하는 JavaScript 메서드
    productCardElement.innerHTML = '';
        - productCardElement 요소의 내부 HTML을 빈 문자열로 설정하여, 기존에 있던 모든 내용을 제거함.
            - 초기화 하기 위하여 사용한다고 보면 된다.
    filteredProducts.forEach(function(product) {});
        - filteredProducts 배열의 각 요소에 대해 주어진 함수를 실행함.
        - product는 현재 처리 중인 배열 요소를 나타냄.
    var productDiv = createProductCard(product[0]);
        - var을 통해 productDiv라는 변수를 선언함.
        - createProductCard라는 함수를 호출하고, 그 함수의 결과를 productDiv라는 변수에 할당한다.
            - createProductCard 함수는 product[0]을 인자로 받는다.
            * product[0] : 현재 처리 중인 제품의 정보를 말한다. (배열에서 하나씩 가져온다.)
    productCardElement.appendChild(productDiv);
        - productCardElement 요소의 자식 요소로 productDiv를 추가한다.
        - 주어진 요소를 자식 다른 요소의 자식 요소로 추가하는 JavaScript 메서드이다.
                --------------------------------------------------------------------
    function loadData() {}
        - loadData 라는 함수를 선언하고 있음.
        - 이 함수는 인자를 받지 않는다.
            - () 안에 인자가 없기 때문에...
    return fetch('new.json')
        - new.json 파일을 비동기적으로 불러오는 작업을 시작한다.
        - fetch는 주어진 url에서 리소스를 불러오는 Promise를 반환하는 JavaScript 함수이다.
            * Promise : JavaScript 비동기 처리에 사용되는 객체.
                        Promise는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용.
                        이 코드에서는 new.json 파일을 받아오기 위함.
                * 비동기 처리 : 특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는
                             자바스크립트 특성을 의미.
    .then(response => response.json())
        - fetch 함수가 반환한 Promise가 성공적으로 완료되면 실행된다.
        - response.json()는 서버에서 받은 응답을 JSON 형태로 파싱하는 Promise를 반환.
        * .then : Promise가 성공적으로 완료 되었을 때, 실행할 콜백 함수를 등록하는 데 사용된다.
                  이전 작업이 성공적으로 완료 되었을 때, 실행할 작업을 등록하는 역활이다.
                  여기서는 .then(response => response.json()) 이 부분을 실행 할 것이라고 등록 함
    .then(jsonData => {})
        - 위와 동일하다.
    data = Object.values(jsonData);
        - jsonData 객체의 모든 속성 값을 배열로 변환하여 data 변수에 저장한다. 
            * data : 코드 제일 상단에 let data; 형태로 선언함.
        - Object.values는 주어진 객체의 모든 속성 값을 배열로 변환하는 JavaScript 함수다.
    displayProducts(data);
        - displayProducts 함수는 호출하여 data 배열을 이 함수에 전달한다. 
    .catch(error => console.error('Error:', error));
        - 함수가 반환한 Promise가 실패하면 실행되며, 실패한 이유를 콘솔에 출력해준다.
        - Promise에서 발생한 예외를 처리하는 데 사용 됨 (한마디로 예외 처리 용이다.)
                --------------------------------------------------------------------
    function registerEventListener() {}
        - registerEventListener 이름의 함수를 호출한다.
        - () 안에 아무것도 없으니 받는 인자 값이 없다.(인자를 받지 않음)
    document.querySelector('.box').addEventListener('change', function() {});
        - querySelector로 class명이 box인 요소를 선택한다.
        - addEventListener로 선택한 HTML 요소에 change 이벤트 리스너를 등록한다.
            * addEventListener : 주어진 이벤트가 발생했을 때, 실행할 함수를 등록하는 JavaScript 메서드다.
                                 change는 등록할 이벤트의 종류를 나타냄.
                                 이벤트 종류는 다양하며, 여기서 사용한 것은 폼 이벤트이다.
    var isChecked = this.checked;
        - 현재 이벤트 리스너가 등록 된 요소(box class가 가진 요소)의 체크 상태를 확인.
        - 그 결과를 isChecked 변수에 저장한다.
        - this.checke는 체크 가능한 요소(체크박스, 라디오, 버튼 등)의 체크 상태를 나타냄
            * this : 일반 함수 실행 방식 / 도트 표기법 / 명백한 바인딩 / new 키워드를 사용한 함수 실행
                     4가지 유형으로 사용할 수 있다.
                     JavaScript에서 this는 현재 컨텍스트를 참조하는 키워드이다.
                     이 코드에서는 이벤트가 방생한 요소, 즉 이벤트 리스너가 등록된 요소를 가르킴(box class)
    filterProducts(isChecked);
        - filterProducts 함수를 호출한다.
        - isChecked 변수를 filteredProducts 함수에 전달한다.
                --------------------------------------------------------------------   
    loadData().then(registerEventListener);
        - loadData 함수를 호출 하고 함수가 반환하는 Promise가 성공적으로 완료되면 registerEventListener를 실행
        - .then 메서드를 이용하여 특정 작업을 수행하도록 예약한다.
        - 성공적으로 불러오지 못하면 해당 코드는 실행되지 않음.
        - 이벤트 리스너를 불러오는 코드